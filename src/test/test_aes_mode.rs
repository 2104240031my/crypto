use crate::crypto::aes::AesAlgorithm;
use crate::crypto::aes::Aes;
use crate::crypto::block_cipher_mode::BlockCipherMode128;
use crate::crypto::block_cipher_mode::Ecb128;
use crate::crypto::block_cipher_mode::Ofb128;
use crate::crypto::block_cipher_mode::Ctr128;
use crate::test::{
    DEBUG_PRINT_AES_MODE,
    printbytesln,
    eqbytes
};

pub fn test_aes_mode() -> usize {
    let mut err: usize = 0;
    err = err + test_aes_128_ecb();
    err = err + test_aes_192_ecb();
    err = err + test_aes_256_ecb();
    err = err + test_aes_128_ofb();
    err = err + test_aes_192_ofb();
    err = err + test_aes_256_ofb();
    err = err + test_aes_128_ctr();
    err = err + test_aes_192_ctr();
    err = err + test_aes_256_ctr();
    return err;
}

fn test_aes_128_ecb() -> usize {

    let k: [u8; 16] = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97,
        0xF5, 0xD3, 0xD5, 0x85, 0x03, 0xB9, 0x69, 0x9D, 0xE7, 0x85, 0x89, 0x5A, 0x96, 0xFD, 0xBA, 0xAF,
        0x43, 0xB1, 0xCD, 0x7F, 0x59, 0x8E, 0xCE, 0x23, 0x88, 0x1B, 0x00, 0xE3, 0xED, 0x03, 0x06, 0x88,
        0x7B, 0x0C, 0x78, 0x5E, 0x27, 0xE8, 0xAD, 0x3F, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5D, 0xD4
    ];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes128, &k[..]).unwrap();

    BlockCipherMode128::ecb_encrypt_blocks(&aes, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    BlockCipherMode128::ecb_decrypt_blocks(&aes, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_192_ecb() -> usize {

    let k: [u8; 24] = [
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F, 0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC,
        0x97, 0x41, 0x04, 0x84, 0x6D, 0x0A, 0xD3, 0xAD, 0x77, 0x34, 0xEC, 0xB3, 0xEC, 0xEE, 0x4E, 0xEF,
        0xEF, 0x7A, 0xFD, 0x22, 0x70, 0xE2, 0xE6, 0x0A, 0xDC, 0xE0, 0xBA, 0x2F, 0xAC, 0xE6, 0x44, 0x4E,
        0x9A, 0x4B, 0x41, 0xBA, 0x73, 0x8D, 0x6C, 0x72, 0xFB, 0x16, 0x69, 0x16, 0x03, 0xC1, 0x8E, 0x0E
    ];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes192, &k[..]).unwrap();

    BlockCipherMode128::ecb_encrypt_blocks(&aes, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    BlockCipherMode128::ecb_decrypt_blocks(&aes, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_256_ecb() -> usize {

    let k: [u8; 32] = [
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8,
        0x59, 0x1C, 0xCB, 0x10, 0xD4, 0x10, 0xED, 0x26, 0xDC, 0x5B, 0xA7, 0x4A, 0x31, 0x36, 0x28, 0x70,
        0xB6, 0xED, 0x21, 0xB9, 0x9C, 0xA6, 0xF4, 0xF9, 0xF1, 0x53, 0xE7, 0xB1, 0xBE, 0xAF, 0xED, 0x1D,
        0x23, 0x30, 0x4B, 0x7A, 0x39, 0xF9, 0xF3, 0xFF, 0x06, 0x7D, 0x8D, 0x8F, 0x9E, 0x24, 0xEC, 0xC7
    ];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes256, &k[..]).unwrap();

    BlockCipherMode128::ecb_encrypt_blocks(&aes, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    BlockCipherMode128::ecb_decrypt_blocks(&aes, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-ECB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_128_ofb() -> usize {

    let k: [u8; 16] = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0x3B, 0x3F, 0xD9, 0x2E, 0xB7, 0x2D, 0xAD, 0x20, 0x33, 0x34, 0x49, 0xF8, 0xE8, 0x3C, 0xFB, 0x4A,
        0x77, 0x89, 0x50, 0x8D, 0x16, 0x91, 0x8F, 0x03, 0xF5, 0x3C, 0x52, 0xDA, 0xC5, 0x4E, 0xD8, 0x25,
        0x97, 0x40, 0x05, 0x1E, 0x9C, 0x5F, 0xEC, 0xF6, 0x43, 0x44, 0xF7, 0xA8, 0x22, 0x60, 0xED, 0xCC,
        0x30, 0x4C, 0x65, 0x28, 0xF6, 0x59, 0xC7, 0x78, 0x66, 0xA5, 0x10, 0xD9, 0xC1, 0xD6, 0xAE, 0x5E
    ];
    let iv: [u8; 16] = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    ];
    let mut sr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes128, &k[..]).unwrap();

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_192_ofb() -> usize {

    let k: [u8; 24] = [
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0xCD, 0xC8, 0x0D, 0x6F, 0xDD, 0xF1, 0x8C, 0xAB, 0x34, 0xC2, 0x59, 0x09, 0xC9, 0x9A, 0x41, 0x74,
        0xFC, 0xC2, 0x8B, 0x8D, 0x4C, 0x63, 0x83, 0x7C, 0x09, 0xE8, 0x17, 0x00, 0xC1, 0x10, 0x04, 0x01,
        0x8D, 0x9A, 0x9A, 0xEA, 0xC0, 0xF6, 0x59, 0x6F, 0x55, 0x9C, 0x6D, 0x4D, 0xAF, 0x59, 0xA5, 0xF2,
        0x6D, 0x9F, 0x20, 0x08, 0x57, 0xCA, 0x6C, 0x3E, 0x9C, 0xAC, 0x52, 0x4B, 0xD9, 0xAC, 0xC9, 0x2A
    ];
    let iv: [u8; 16] = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    ];
    let mut sr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes192, &k[..]).unwrap();

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_256_ofb() -> usize {

    let k: [u8; 32] = [
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B, 0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60,
        0x4F, 0xEB, 0xDC, 0x67, 0x40, 0xD2, 0x0B, 0x3A, 0xC8, 0x8F, 0x6A, 0xD8, 0x2A, 0x4F, 0xB0, 0x8D,
        0x71, 0xAB, 0x47, 0xA0, 0x86, 0xE8, 0x6E, 0xED, 0xF3, 0x9D, 0x1C, 0x5B, 0xBA, 0x97, 0xC4, 0x08,
        0x01, 0x26, 0x14, 0x1D, 0x67, 0xF3, 0x7B, 0xE8, 0x53, 0x8F, 0x5A, 0x8B, 0xE7, 0x40, 0xE4, 0x84
    ];
    let iv: [u8; 16] = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    ];
    let mut sr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes256, &k[..]).unwrap();

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    sr.copy_from_slice(&iv[..]);
    BlockCipherMode128::ofb_encrypt_or_decrypt(&aes, &mut sr[..], &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-OFB is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_128_ctr() -> usize {

    let k: [u8; 16] = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0x87, 0x4D, 0x61, 0x91, 0xB6, 0x20, 0xE3, 0x26, 0x1B, 0xEF, 0x68, 0x64, 0x99, 0x0D, 0xB6, 0xCE,
        0x98, 0x06, 0xF6, 0x6B, 0x79, 0x70, 0xFD, 0xFF, 0x86, 0x17, 0x18, 0x7B, 0xB9, 0xFF, 0xFD, 0xFF,
        0x5A, 0xE4, 0xDF, 0x3E, 0xDB, 0xD5, 0xD3, 0x5E, 0x5B, 0x4F, 0x09, 0x02, 0x0D, 0xB0, 0x3E, 0xAB,
        0x1E, 0x03, 0x1D, 0xDA, 0x2F, 0xBE, 0x03, 0xD1, 0x79, 0x21, 0x70, 0xA0, 0xF3, 0x00, 0x9C, 0xEE
    ];
    let icb: [u8; 16] = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
    let mut ctr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes128, &k[..]).unwrap();

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-128-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_192_ctr() -> usize {

    let k: [u8; 24] = [
        0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
        0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0x1A, 0xBC, 0x93, 0x24, 0x17, 0x52, 0x1C, 0xA2, 0x4F, 0x2B, 0x04, 0x59, 0xFE, 0x7E, 0x6E, 0x0B,
        0x09, 0x03, 0x39, 0xEC, 0x0A, 0xA6, 0xFA, 0xEF, 0xD5, 0xCC, 0xC2, 0xC6, 0xF4, 0xCE, 0x8E, 0x94,
        0x1E, 0x36, 0xB2, 0x6B, 0xD1, 0xEB, 0xC6, 0x70, 0xD1, 0xBD, 0x1D, 0x66, 0x56, 0x20, 0xAB, 0xF7,
        0x4F, 0x78, 0xA7, 0xF6, 0xD2, 0x98, 0x09, 0x58, 0x5A, 0x97, 0xDA, 0xEC, 0x58, 0xC6, 0xB0, 0x50
    ];
    let icb: [u8; 16] = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
    let mut ctr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes192, &k[..]).unwrap();

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-192-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_aes_256_ctr() -> usize {

    let k: [u8; 32] = [
        0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
        0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
    ];
    let p: [u8; 64] = [
        0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
        0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
        0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
        0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
    ];
    let c: [u8; 64] = [
        0x60, 0x1E, 0xC3, 0x13, 0x77, 0x57, 0x89, 0xA5, 0xB7, 0xA7, 0xF5, 0x04, 0xBB, 0xF3, 0xD2, 0x28,
        0xF4, 0x43, 0xE3, 0xCA, 0x4D, 0x62, 0xB5, 0x9A, 0xCA, 0x84, 0xE9, 0x90, 0xCA, 0xCA, 0xF5, 0xC5,
        0x2B, 0x09, 0x30, 0xDA, 0xA2, 0x3D, 0xE9, 0x4C, 0xE8, 0x70, 0x17, 0xBA, 0x2D, 0x84, 0x98, 0x8D,
        0xDF, 0xC9, 0xC5, 0x8D, 0xB6, 0x7A, 0xAD, 0xA6, 0x13, 0xC2, 0xDD, 0x08, 0x45, 0x79, 0x41, 0xA6
    ];
    let icb: [u8; 16] = [
        0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ];
    let mut ctr: [u8; 16] = [0; 16];
    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    let aes: Aes = Aes::new(AesAlgorithm::Aes256, &k[..]).unwrap();

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &p[..], &mut out[..]).unwrap();
    if !eqbytes(&c[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&c[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    ctr.copy_from_slice(&icb[..]);
    BlockCipherMode128::ctr_encrypt_or_decrypt(&aes, &mut ctr[..], 16, &c[..], &mut out[..]).unwrap();
    if !eqbytes(&p[..], &out[..]) || DEBUG_PRINT_AES_MODE {
        print!("[!Err]: testing AES-256-CTR is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(&p[..]);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}
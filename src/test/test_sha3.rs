use crate::crypto::Hash;
use crate::crypto::Xof;
use crate::crypto::sha3::Sha3224;
use crate::crypto::sha3::Sha3256;
use crate::crypto::sha3::Sha3384;
use crate::crypto::sha3::Sha3512;
use crate::crypto::sha3::Shake128;
use crate::crypto::sha3::Shake256;
use crate::test::{
    DEBUG_PRINT_SHA3,
    printbytesln,
    eqbytes
};

pub fn test_sha3() -> usize {
    let mut err: usize = 0;
    err = err + test_sha3_224();
    err = err + test_sha3_256();
    err = err + test_sha3_384();
    err = err + test_sha3_512();
    err = err + test_shake128();
    err = err + test_shake256();
    return err;
}

static M0: [u8; 200] = [0xa3; 200];

fn test_sha3_224_inner(m: &[u8], d: &[u8]) -> usize {

    let mut out: [u8; 28] = [0; 28];
    let mut err: usize = 0;

    Sha3224::digest_oneshot(m, &mut out[..]).unwrap();
    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-224 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    let mut sha3 = Sha3224::new();
    sha3.reset().unwrap();
    for i in 0..m.len() {
        sha3.update(&m[i..(i + 1)]).unwrap();
    }
    sha3.digest(&mut out[..28]).unwrap();

    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-224 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_sha3_256_inner(m: &[u8], d: &[u8]) -> usize {

    let mut out: [u8; 32] = [0; 32];
    let mut err: usize = 0;

    Sha3256::digest_oneshot(m, &mut out[..]).unwrap();
    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-256 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    let mut sha3 = Sha3256::new();
    sha3.reset().unwrap();
    for i in 0..m.len() {
        sha3.update(&m[i..(i + 1)]).unwrap();
    }
    sha3.digest(&mut out[..32]).unwrap();

    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-256 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_sha3_384_inner(m: &[u8], d: &[u8]) -> usize {

    let mut out: [u8; 48] = [0; 48];
    let mut err: usize = 0;

    Sha3384::digest_oneshot(m, &mut out[..]).unwrap();
    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-384 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    let mut sha3 = Sha3384::new();
    sha3.reset().unwrap();
    for i in 0..m.len() {
        sha3.update(&m[i..(i + 1)]).unwrap();
    }
    sha3.digest(&mut out[..48]).unwrap();

    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-384 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_sha3_512_inner(m: &[u8], d: &[u8]) -> usize {

    let mut out: [u8; 64] = [0; 64];
    let mut err: usize = 0;

    Sha3512::digest_oneshot(m, &mut out[..]).unwrap();
    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-512 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    let mut sha3 = Sha3512::new();
    sha3.reset().unwrap();
    for i in 0..m.len() {
        sha3.update(&m[i..(i + 1)]).unwrap();
    }
    sha3.digest(&mut out[..64]).unwrap();

    if !eqbytes(d, &out[..]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHA3-512 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_shake128_inner(m: &[u8], d: &[u8], n: usize) -> usize {

    let mut out: [u8; 512] = [0; 512];
    let mut err: usize = 0;

    Shake128::output_oneshot(m, &mut out[..n], n).unwrap();
    if !eqbytes(d, &out[..n]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHAKE128 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..n]);
        println!();
        err = err + 1;
    }

    let mut shake = Shake128::new();
    shake.reset().unwrap();
    for i in 0..m.len() {
        shake.update(&m[i..(i + 1)]).unwrap();
    }
    shake.output(&mut out[..n], n).unwrap();

    if !eqbytes(d, &out[..n]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHAKE128 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..n]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_shake256_inner(m: &[u8], d: &[u8], n: usize) -> usize {

    let mut out: [u8; 512] = [0; 512];
    let mut err: usize = 0;

    Shake256::output_oneshot(m, &mut out[..n], n).unwrap();
    if !eqbytes(d, &out[..n]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHAKE256 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..n]);
        println!();
        err = err + 1;
    }

    let mut shake = Shake256::new();
    shake.reset().unwrap();
    for i in 0..m.len() {
        shake.update(&m[i..(i + 1)]).unwrap();
    }
    shake.output(&mut out[..n], n).unwrap();

    if !eqbytes(d, &out[..n]) || DEBUG_PRINT_SHA3 {
        print!("[!Err]: testing SHAKE256 is FAILED.\n");
        print!(" - Test-Vec => "); printbytesln(d);
        print!(" - Exec-Res => "); printbytesln(&out[..n]);
        println!();
        err = err + 1;
    }

    return err;

}

fn test_sha3_224() -> usize {
    let d1: [u8; 28] = [
        0x93, 0x76, 0x81, 0x6A, 0xBA, 0x50, 0x3F, 0x72, 0xF9, 0x6C, 0xE7, 0xEB, 0x65, 0xAC, 0x09, 0x5D,
        0xEE, 0xE3, 0xBE, 0x4B, 0xF9, 0xBB, 0xC2, 0xA1, 0xCB, 0x7E, 0x11, 0xE0
    ];
    return test_sha3_224_inner(&M0[..], &d1[..]);
}

fn test_sha3_256() -> usize {
    let d1: [u8; 32] = [
        0x79, 0xF3, 0x8A, 0xDE, 0xC5, 0xC2, 0x03, 0x07, 0xA9, 0x8E, 0xF7, 0x6E, 0x83, 0x24, 0xAF, 0xBF,
        0xD4, 0x6C, 0xFD, 0x81, 0xB2, 0x2E, 0x39, 0x73, 0xC6, 0x5F, 0xA1, 0xBD, 0x9D, 0xE3, 0x17, 0x87
    ];
    return test_sha3_256_inner(&M0[..], &d1[..]);
}

fn test_sha3_384() -> usize {
    let d1: [u8; 48] = [
        0x18, 0x81, 0xDE, 0x2C, 0xA7, 0xE4, 0x1E, 0xF9, 0x5D, 0xC4, 0x73, 0x2B, 0x8F, 0x5F, 0x00, 0x2B,
        0x18, 0x9C, 0xC1, 0xE4, 0x2B, 0x74, 0x16, 0x8E, 0xD1, 0x73, 0x26, 0x49, 0xCE, 0x1D, 0xBC, 0xDD,
        0x76, 0x19, 0x7A, 0x31, 0xFD, 0x55, 0xEE, 0x98, 0x9F, 0x2D, 0x70, 0x50, 0xDD, 0x47, 0x3E, 0x8F
    ];
    return test_sha3_384_inner(&M0[..], &d1[..]);
}

fn test_sha3_512() -> usize {
    let d1: [u8; 64] = [
        0xE7, 0x6D, 0xFA, 0xD2, 0x20, 0x84, 0xA8, 0xB1, 0x46, 0x7F, 0xCF, 0x2F, 0xFA, 0x58, 0x36, 0x1B,
        0xEC, 0x76, 0x28, 0xED, 0xF5, 0xF3, 0xFD, 0xC0, 0xE4, 0x80, 0x5D, 0xC4, 0x8C, 0xAE, 0xEC, 0xA8,
        0x1B, 0x7C, 0x13, 0xC3, 0x0A, 0xDF, 0x52, 0xA3, 0x65, 0x95, 0x84, 0x73, 0x9A, 0x2D, 0xF4, 0x6B,
        0xE5, 0x89, 0xC5, 0x1C, 0xA1, 0xA4, 0xA8, 0x41, 0x6D, 0xF6, 0x54, 0x5A, 0x1C, 0xE8, 0xBA, 0x00
    ];
    return test_sha3_512_inner(&M0[..], &d1[..]);
}

fn test_shake128() -> usize {
    let d1: [u8; 512] = [
        0x13, 0x1A, 0xB8, 0xD2, 0xB5, 0x94, 0x94, 0x6B, 0x9C, 0x81, 0x33, 0x3F, 0x9B, 0xB6, 0xE0, 0xCE,
        0x75, 0xC3, 0xB9, 0x31, 0x04, 0xFA, 0x34, 0x69, 0xD3, 0x91, 0x74, 0x57, 0x38, 0x5D, 0xA0, 0x37,
        0xCF, 0x23, 0x2E, 0xF7, 0x16, 0x4A, 0x6D, 0x1E, 0xB4, 0x48, 0xC8, 0x90, 0x81, 0x86, 0xAD, 0x85,
        0x2D, 0x3F, 0x85, 0xA5, 0xCF, 0x28, 0xDA, 0x1A, 0xB6, 0xFE, 0x34, 0x38, 0x17, 0x19, 0x78, 0x46,
        0x7F, 0x1C, 0x05, 0xD5, 0x8C, 0x7E, 0xF3, 0x8C, 0x28, 0x4C, 0x41, 0xF6, 0xC2, 0x22, 0x1A, 0x76,
        0xF1, 0x2A, 0xB1, 0xC0, 0x40, 0x82, 0x66, 0x02, 0x50, 0x80, 0x22, 0x94, 0xFB, 0x87, 0x18, 0x02,
        0x13, 0xFD, 0xEF, 0x5B, 0x0E, 0xCB, 0x7D, 0xF5, 0x0C, 0xA1, 0xF8, 0x55, 0x5B, 0xE1, 0x4D, 0x32,
        0xE1, 0x0F, 0x6E, 0xDC, 0xDE, 0x89, 0x2C, 0x09, 0x42, 0x4B, 0x29, 0xF5, 0x97, 0xAF, 0xC2, 0x70,
        0xC9, 0x04, 0x55, 0x6B, 0xFC, 0xB4, 0x7A, 0x7D, 0x40, 0x77, 0x8D, 0x39, 0x09, 0x23, 0x64, 0x2B,
        0x3C, 0xBD, 0x05, 0x79, 0xE6, 0x09, 0x08, 0xD5, 0xA0, 0x00, 0xC1, 0xD0, 0x8B, 0x98, 0xEF, 0x93,
        0x3F, 0x80, 0x64, 0x45, 0xBF, 0x87, 0xF8, 0xB0, 0x09, 0xBA, 0x9E, 0x94, 0xF7, 0x26, 0x61, 0x22,
        0xED, 0x7A, 0xC2, 0x4E, 0x5E, 0x26, 0x6C, 0x42, 0xA8, 0x2F, 0xA1, 0xBB, 0xEF, 0xB7, 0xB8, 0xDB,
        0x00, 0x66, 0xE1, 0x6A, 0x85, 0xE0, 0x49, 0x3F, 0x07, 0xDF, 0x48, 0x09, 0xAE, 0xC0, 0x84, 0xA5,
        0x93, 0x74, 0x8A, 0xC3, 0xDD, 0xE5, 0xA6, 0xD7, 0xAA, 0xE1, 0xE8, 0xB6, 0xE5, 0x35, 0x2B, 0x2D,
        0x71, 0xEF, 0xBB, 0x47, 0xD4, 0xCA, 0xEE, 0xD5, 0xE6, 0xD6, 0x33, 0x80, 0x5D, 0x2D, 0x32, 0x3E,
        0x6F, 0xD8, 0x1B, 0x46, 0x84, 0xB9, 0x3A, 0x26, 0x77, 0xD4, 0x5E, 0x74, 0x21, 0xC2, 0xC6, 0xAE,
        0xA2, 0x59, 0xB8, 0x55, 0xA6, 0x98, 0xFD, 0x7D, 0x13, 0x47, 0x7A, 0x1F, 0xE5, 0x3E, 0x5A, 0x4A,
        0x61, 0x97, 0xDB, 0xEC, 0x5C, 0xE9, 0x5F, 0x50, 0x5B, 0x52, 0x0B, 0xCD, 0x95, 0x70, 0xC4, 0xA8,
        0x26, 0x5A, 0x7E, 0x01, 0xF8, 0x9C, 0x0C, 0x00, 0x2C, 0x59, 0xBF, 0xEC, 0x6C, 0xD4, 0xA5, 0xC1,
        0x09, 0x25, 0x89, 0x53, 0xEE, 0x5E, 0xE7, 0x0C, 0xD5, 0x77, 0xEE, 0x21, 0x7A, 0xF2, 0x1F, 0xA7,
        0x01, 0x78, 0xF0, 0x94, 0x6C, 0x9B, 0xF6, 0xCA, 0x87, 0x51, 0x79, 0x34, 0x79, 0xF6, 0xB5, 0x37,
        0x73, 0x7E, 0x40, 0xB6, 0xED, 0x28, 0x51, 0x1D, 0x8A, 0x2D, 0x7E, 0x73, 0xEB, 0x75, 0xF8, 0xDA,
        0xAC, 0x91, 0x2F, 0xF9, 0x06, 0xE0, 0xAB, 0x95, 0x5B, 0x08, 0x3B, 0xAC, 0x45, 0xA8, 0xE5, 0xE9,
        0xB7, 0x44, 0xC8, 0x50, 0x6F, 0x37, 0xE9, 0xB4, 0xE7, 0x49, 0xA1, 0x84, 0xB3, 0x0F, 0x43, 0xEB,
        0x18, 0x8D, 0x85, 0x5F, 0x1B, 0x70, 0xD7, 0x1F, 0xF3, 0xE5, 0x0C, 0x53, 0x7A, 0xC1, 0xB0, 0xF8,
        0x97, 0x4F, 0x0F, 0xE1, 0xA6, 0xAD, 0x29, 0x5B, 0xA4, 0x2F, 0x6A, 0xEC, 0x74, 0xD1, 0x23, 0xA7,
        0xAB, 0xED, 0xDE, 0x6E, 0x2C, 0x07, 0x11, 0xCA, 0xB3, 0x6B, 0xE5, 0xAC, 0xB1, 0xA5, 0xA1, 0x1A,
        0x4B, 0x1D, 0xB0, 0x8B, 0xA6, 0x98, 0x2E, 0xFC, 0xCD, 0x71, 0x69, 0x29, 0xA7, 0x74, 0x1C, 0xFC,
        0x63, 0xAA, 0x44, 0x35, 0xE0, 0xB6, 0x9A, 0x90, 0x63, 0xE8, 0x80, 0x79, 0x5C, 0x3D, 0xC5, 0xEF,
        0x32, 0x72, 0xE1, 0x1C, 0x49, 0x7A, 0x91, 0xAC, 0xF6, 0x99, 0xFE, 0xFE, 0xE2, 0x06, 0x22, 0x7A,
        0x44, 0xC9, 0xFB, 0x35, 0x9F, 0xD5, 0x6A, 0xC0, 0xA9, 0xA7, 0x5A, 0x74, 0x3C, 0xFF, 0x68, 0x62,
        0xF1, 0x7D, 0x72, 0x59, 0xAB, 0x07, 0x52, 0x16, 0xC0, 0x69, 0x95, 0x11, 0x64, 0x3B, 0x64, 0x39
    ];
    return test_shake128_inner(&M0[..], &d1[..], 512);
}

fn test_shake256() -> usize {
    let d1: [u8; 512] = [
        0xCD, 0x8A, 0x92, 0x0E, 0xD1, 0x41, 0xAA, 0x04, 0x07, 0xA2, 0x2D, 0x59, 0x28, 0x86, 0x52, 0xE9,
        0xD9, 0xF1, 0xA7, 0xEE, 0x0C, 0x1E, 0x7C, 0x1C, 0xA6, 0x99, 0x42, 0x4D, 0xA8, 0x4A, 0x90, 0x4D,
        0x2D, 0x70, 0x0C, 0xAA, 0xE7, 0x39, 0x6E, 0xCE, 0x96, 0x60, 0x44, 0x40, 0x57, 0x7D, 0xA4, 0xF3,
        0xAA, 0x22, 0xAE, 0xB8, 0x85, 0x7F, 0x96, 0x1C, 0x4C, 0xD8, 0xE0, 0x6F, 0x0A, 0xE6, 0x61, 0x0B,
        0x10, 0x48, 0xA7, 0xF6, 0x4E, 0x10, 0x74, 0xCD, 0x62, 0x9E, 0x85, 0xAD, 0x75, 0x66, 0x04, 0x8E,
        0xFC, 0x4F, 0xB5, 0x00, 0xB4, 0x86, 0xA3, 0x30, 0x9A, 0x8F, 0x26, 0x72, 0x4C, 0x0E, 0xD6, 0x28,
        0x00, 0x1A, 0x10, 0x99, 0x42, 0x24, 0x68, 0xDE, 0x72, 0x6F, 0x10, 0x61, 0xD9, 0x9E, 0xB9, 0xE9,
        0x36, 0x04, 0xD5, 0xAA, 0x74, 0x67, 0xD4, 0xB1, 0xBD, 0x64, 0x84, 0x58, 0x2A, 0x38, 0x43, 0x17,
        0xD7, 0xF4, 0x7D, 0x75, 0x0B, 0x8F, 0x54, 0x99, 0x51, 0x2B, 0xB8, 0x5A, 0x22, 0x6C, 0x42, 0x43,
        0x55, 0x6E, 0x69, 0x6F, 0x6B, 0xD0, 0x72, 0xC5, 0xAA, 0x2D, 0x9B, 0x69, 0x73, 0x02, 0x44, 0xB5,
        0x68, 0x53, 0xD1, 0x69, 0x70, 0xAD, 0x81, 0x7E, 0x21, 0x3E, 0x47, 0x06, 0x18, 0x17, 0x80, 0x01,
        0xC9, 0xFB, 0x56, 0xC5, 0x4F, 0xEF, 0xA5, 0xFE, 0xE6, 0x7D, 0x2D, 0xA5, 0x24, 0xBB, 0x3B, 0x0B,
        0x61, 0xEF, 0x0E, 0x91, 0x14, 0xA9, 0x2C, 0xDB, 0xB6, 0xCC, 0xCB, 0x98, 0x61, 0x5C, 0xFE, 0x76,
        0xE3, 0x51, 0x0D, 0xD8, 0x8D, 0x1C, 0xC2, 0x8F, 0xF9, 0x92, 0x87, 0x51, 0x2F, 0x24, 0xBF, 0xAF,
        0xA1, 0xA7, 0x68, 0x77, 0xB6, 0xF3, 0x71, 0x98, 0xE3, 0xA6, 0x41, 0xC6, 0x8A, 0x7C, 0x42, 0xD4,
        0x5F, 0xA7, 0xAC, 0xC1, 0x0D, 0xAE, 0x5F, 0x3C, 0xEF, 0xB7, 0xB7, 0x35, 0xF1, 0x2D, 0x4E, 0x58,
        0x9F, 0x7A, 0x45, 0x6E, 0x78, 0xC0, 0xF5, 0xE4, 0xC4, 0x47, 0x1F, 0xFF, 0xA5, 0xE4, 0xFA, 0x05,
        0x14, 0xAE, 0x97, 0x4D, 0x8C, 0x26, 0x48, 0x51, 0x3B, 0x5D, 0xB4, 0x94, 0xCE, 0xA8, 0x47, 0x15,
        0x6D, 0x27, 0x7A, 0xD0, 0xE1, 0x41, 0xC2, 0x4C, 0x78, 0x39, 0x06, 0x4C, 0xD0, 0x88, 0x51, 0xBC,
        0x2E, 0x7C, 0xA1, 0x09, 0xFD, 0x4E, 0x25, 0x1C, 0x35, 0xBB, 0x0A, 0x04, 0xFB, 0x05, 0xB3, 0x64,
        0xFF, 0x8C, 0x4D, 0x8B, 0x59, 0xBC, 0x30, 0x3E, 0x25, 0x32, 0x8C, 0x09, 0xA8, 0x82, 0xE9, 0x52,
        0x51, 0x8E, 0x1A, 0x8A, 0xE0, 0xFF, 0x26, 0x5D, 0x61, 0xC4, 0x65, 0x89, 0x69, 0x73, 0xD7, 0x49,
        0x04, 0x99, 0xDC, 0x63, 0x9F, 0xB8, 0x50, 0x2B, 0x39, 0x45, 0x67, 0x91, 0xB1, 0xB6, 0xEC, 0x5B,
        0xCC, 0x5D, 0x9A, 0xC3, 0x6A, 0x6D, 0xF6, 0x22, 0xA0, 0x70, 0xD4, 0x3F, 0xED, 0x78, 0x1F, 0x5F,
        0x14, 0x9F, 0x7B, 0x62, 0x67, 0x5E, 0x7D, 0x1A, 0x4D, 0x6D, 0xEC, 0x48, 0xC1, 0xC7, 0x16, 0x45,
        0x86, 0xEA, 0xE0, 0x6A, 0x51, 0x20, 0x8C, 0x0B, 0x79, 0x12, 0x44, 0xD3, 0x07, 0x72, 0x65, 0x05,
        0xC3, 0xAD, 0x4B, 0x26, 0xB6, 0x82, 0x23, 0x77, 0x25, 0x7A, 0xA1, 0x52, 0x03, 0x75, 0x60, 0xA7,
        0x39, 0x71, 0x4A, 0x3C, 0xA7, 0x9B, 0xD6, 0x05, 0x54, 0x7C, 0x9B, 0x78, 0xDD, 0x1F, 0x59, 0x6F,
        0x2D, 0x4F, 0x17, 0x91, 0xBC, 0x68, 0x9A, 0x0E, 0x9B, 0x79, 0x9A, 0x37, 0x33, 0x9C, 0x04, 0x27,
        0x57, 0x33, 0x74, 0x01, 0x43, 0xEF, 0x5D, 0x2B, 0x58, 0xB9, 0x6A, 0x36, 0x3D, 0x4E, 0x08, 0x07,
        0x6A, 0x1A, 0x9D, 0x78, 0x46, 0x43, 0x6E, 0x4D, 0xCA, 0x57, 0x28, 0xB6, 0xF7, 0x60, 0xEE, 0xF0,
        0xCA, 0x92, 0xBF, 0x0B, 0xE5, 0x61, 0x5E, 0x96, 0x95, 0x9D, 0x76, 0x71, 0x97, 0xA0, 0xBE, 0xEB
    ];
    return test_shake256_inner(&M0[..], &d1[..], 512);
}